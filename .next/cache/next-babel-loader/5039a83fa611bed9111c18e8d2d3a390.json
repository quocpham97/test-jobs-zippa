{"ast":null,"code":"import { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\ReactJS\\\\test-jobs-zippa\\\\components\\\\Job.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport JobCard from \"./JobCard\";\nimport FilterJob from \"./FilterJob\";\nimport styles from \"./Job.module.css\";\n\nfunction Job() {\n  // Store all jobs get from api\n  const {\n    0: jobs,\n    1: setJobs\n  } = useState([]); // Store first 10 jobs\n\n  const {\n    0: tenJobs,\n    1: setTenJobs\n  } = useState([]); // Store company name list\n\n  const {\n    0: companyNames,\n    1: setCompanyNames\n  } = useState([]);\n  const {\n    0: companyName,\n    1: setCompanyName\n  } = useState(\"first10jobs\");\n  const {\n    0: isSevenLastDays,\n    1: setIsSevenLastdays\n  } = useState(false); // Get jobs from api\n\n  useEffect(() => {\n    axios.post(\"https://www.zippia.com/api/jobs/\", {\n      companySkills: true,\n      dismissedListingHashes: [],\n      fetchJobDesc: true,\n      jobTitle: \"Business Analyst\",\n      locations: [],\n      numJobs: 20,\n      previousListingHashes: []\n    }).then(result => {\n      setJobs(result.data.jobs);\n      setTenJobs(result.data.jobs.slice(0, 10));\n      setCompanyNames(result.data.jobs.map(filter => filter.companyName) // Filter only company name from data\n      .filter(function (value, index, self) {\n        // Make sure company name not duplicate\n        return self.indexOf(value) === index;\n      }));\n    });\n  }, []);\n\n  function handleCompanyChange(companyName) {\n    setCompanyName(companyName);\n\n    if (!isSevenLastDays) {\n      if (companyName === \"first10jobs\") setTenJobs(jobs.slice(0, 10));else {\n        setTenJobs( // Filter jobs by company name\n        jobs.filter(function (company) {\n          return company.companyName === companyName;\n        }));\n      }\n    } else {\n      if (companyName === \"first10jobs\") {\n        setTenJobs(jobs.filter(function (company) {\n          var d = new Date(); // Filter 10 jobs in last 7 days\n\n          return Date.parse(company.OBJpostingDate) >= d.setDate(d.getDate() - 7);\n        }).slice(0, 10));\n      } else {\n        setTenJobs( // Filter jobs by company name\n        jobs.filter(function (company) {\n          var d = new Date();\n          return company.companyName === companyName && Date.parse(company.OBJpostingDate) >= d.setDate(d.getDate() - 7);\n        }));\n      }\n    }\n  }\n\n  function handleButtonChange(flag) {\n    setIsSevenLastdays(flag);\n  } // Call handleCompanyChange whenever isSevenLastDays change\n\n\n  useEffect(() => {\n    handleCompanyChange(companyName); // eslint-disable-next-line\n  }, [isSevenLastDays]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FilterJob, {\n      companyNames: companyNames,\n      handleCompanyChange: handleCompanyChange,\n      handleButtonChange: handleButtonChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.jobcardContainer,\n      children: tenJobs.map(job => /*#__PURE__*/_createElement(JobCard, _objectSpread(_objectSpread({}, job), {}, {\n        key: job.jobId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        },\n        __self: this\n      })))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\nexport default Job;","map":{"version":3,"sources":["D:/ReactJS/test-jobs-zippa/components/Job.js"],"names":["React","useState","useEffect","axios","JobCard","FilterJob","styles","Job","jobs","setJobs","tenJobs","setTenJobs","companyNames","setCompanyNames","companyName","setCompanyName","isSevenLastDays","setIsSevenLastdays","post","companySkills","dismissedListingHashes","fetchJobDesc","jobTitle","locations","numJobs","previousListingHashes","then","result","data","slice","map","filter","value","index","self","indexOf","handleCompanyChange","company","d","Date","parse","OBJpostingDate","setDate","getDate","handleButtonChange","flag","jobcardContainer","job","jobId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport JobCard from \"./JobCard\";\r\nimport FilterJob from \"./FilterJob\";\r\nimport styles from \"./Job.module.css\";\r\n\r\nfunction Job() {\r\n  // Store all jobs get from api\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  // Store first 10 jobs\r\n  const [tenJobs, setTenJobs] = useState([]);\r\n\r\n  // Store company name list\r\n  const [companyNames, setCompanyNames] = useState([]);\r\n\r\n  const [companyName, setCompanyName] = useState(\"first10jobs\");\r\n  const [isSevenLastDays, setIsSevenLastdays] = useState(false);\r\n\r\n  // Get jobs from api\r\n  useEffect(() => {\r\n    axios\r\n      .post(\"https://www.zippia.com/api/jobs/\", {\r\n        companySkills: true,\r\n        dismissedListingHashes: [],\r\n        fetchJobDesc: true,\r\n        jobTitle: \"Business Analyst\",\r\n        locations: [],\r\n        numJobs: 20,\r\n        previousListingHashes: []\r\n      })\r\n      .then((result) => {\r\n        setJobs(result.data.jobs);\r\n        setTenJobs(result.data.jobs.slice(0, 10));\r\n        setCompanyNames(\r\n          result.data.jobs\r\n            .map((filter) => filter.companyName) // Filter only company name from data\r\n            .filter(function (value, index, self) {\r\n              // Make sure company name not duplicate\r\n              return self.indexOf(value) === index;\r\n            })\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  function handleCompanyChange(companyName) {\r\n    setCompanyName(companyName);\r\n    if (!isSevenLastDays) {\r\n      if (companyName === \"first10jobs\") setTenJobs(jobs.slice(0, 10));\r\n      else {\r\n        setTenJobs(\r\n          // Filter jobs by company name\r\n          jobs.filter(function (company) {\r\n            return company.companyName === companyName;\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      if (companyName === \"first10jobs\") {\r\n        setTenJobs(\r\n          jobs\r\n            .filter(function (company) {\r\n              var d = new Date();\r\n              // Filter 10 jobs in last 7 days\r\n              return Date.parse(company.OBJpostingDate) >= d.setDate(d.getDate() - 7);\r\n            })\r\n            .slice(0, 10)\r\n        );\r\n      } else {\r\n        setTenJobs(\r\n          // Filter jobs by company name\r\n          jobs.filter(function (company) {\r\n            var d = new Date();\r\n            return (\r\n              company.companyName === companyName &&\r\n              Date.parse(company.OBJpostingDate) >= d.setDate(d.getDate() - 7)\r\n            );\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleButtonChange(flag) {\r\n    setIsSevenLastdays(flag);\r\n  }\r\n\r\n  // Call handleCompanyChange whenever isSevenLastDays change\r\n  useEffect(() => {\r\n    handleCompanyChange(companyName);\r\n    // eslint-disable-next-line\r\n  }, [isSevenLastDays]);\r\n\r\n  return (\r\n    <div>\r\n      <FilterJob\r\n        companyNames={companyNames}\r\n        handleCompanyChange={handleCompanyChange}\r\n        handleButtonChange={handleButtonChange}\r\n      />\r\n\r\n      <div className={styles.jobcardContainer}>\r\n        {tenJobs.map((job) => (\r\n          <JobCard {...job} key={job.jobId} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Job;\r\n"]},"metadata":{},"sourceType":"module"}